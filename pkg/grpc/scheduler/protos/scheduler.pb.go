// Code generated by protoc-gen-go.
// source: pkg/grpc/scheduler/protos/scheduler.proto
// DO NOT EDIT!

/*
Package scheduler_protos is a generated protocol buffer package.

It is generated from these files:
	pkg/grpc/scheduler/protos/scheduler.proto

It has these top-level messages:
	AllocateNodesRequest
	AllocateNodesResponse
*/
package scheduler_protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AllocateNodesRequest struct {
	Manifest       string `protobuf:"bytes,1,opt,name=manifest" json:"manifest,omitempty"`
	NodeSelector   string `protobuf:"bytes,2,opt,name=node_selector,json=nodeSelector" json:"node_selector,omitempty"`
	NodesRequested int64  `protobuf:"varint,3,opt,name=nodes_requested,json=nodesRequested" json:"nodes_requested,omitempty"`
}

func (m *AllocateNodesRequest) Reset()                    { *m = AllocateNodesRequest{} }
func (m *AllocateNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateNodesRequest) ProtoMessage()               {}
func (*AllocateNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllocateNodesRequest) GetManifest() string {
	if m != nil {
		return m.Manifest
	}
	return ""
}

func (m *AllocateNodesRequest) GetNodeSelector() string {
	if m != nil {
		return m.NodeSelector
	}
	return ""
}

func (m *AllocateNodesRequest) GetNodesRequested() int64 {
	if m != nil {
		return m.NodesRequested
	}
	return 0
}

type AllocateNodesResponse struct {
	AllocatedNodes []string `protobuf:"bytes,1,rep,name=allocated_nodes,json=allocatedNodes" json:"allocated_nodes,omitempty"`
}

func (m *AllocateNodesResponse) Reset()                    { *m = AllocateNodesResponse{} }
func (m *AllocateNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateNodesResponse) ProtoMessage()               {}
func (*AllocateNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllocateNodesResponse) GetAllocatedNodes() []string {
	if m != nil {
		return m.AllocatedNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocateNodesRequest)(nil), "scheduler_protos.AllocateNodesRequest")
	proto.RegisterType((*AllocateNodesResponse)(nil), "scheduler_protos.AllocateNodesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P2Scheduler service

type P2SchedulerClient interface {
	AllocateNodes(ctx context.Context, in *AllocateNodesRequest, opts ...grpc.CallOption) (*AllocateNodesResponse, error)
}

type p2SchedulerClient struct {
	cc *grpc.ClientConn
}

func NewP2SchedulerClient(cc *grpc.ClientConn) P2SchedulerClient {
	return &p2SchedulerClient{cc}
}

func (c *p2SchedulerClient) AllocateNodes(ctx context.Context, in *AllocateNodesRequest, opts ...grpc.CallOption) (*AllocateNodesResponse, error) {
	out := new(AllocateNodesResponse)
	err := grpc.Invoke(ctx, "/scheduler_protos.P2Scheduler/AllocateNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P2Scheduler service

type P2SchedulerServer interface {
	AllocateNodes(context.Context, *AllocateNodesRequest) (*AllocateNodesResponse, error)
}

func RegisterP2SchedulerServer(s *grpc.Server, srv P2SchedulerServer) {
	s.RegisterService(&_P2Scheduler_serviceDesc, srv)
}

func _P2Scheduler_AllocateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2SchedulerServer).AllocateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler_protos.P2Scheduler/AllocateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2SchedulerServer).AllocateNodes(ctx, req.(*AllocateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler_protos.P2Scheduler",
	HandlerType: (*P2SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateNodes",
			Handler:    _P2Scheduler_AllocateNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/scheduler/protos/scheduler.proto",
}

func init() { proto.RegisterFile("pkg/grpc/scheduler/protos/scheduler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x8f, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x8d, 0x05, 0x71, 0x47, 0x37, 0x25, 0x28, 0x94, 0x5d, 0x95, 0x0a, 0xae, 0xde, 0xb4,
	0x30, 0x5f, 0x40, 0x5f, 0x40, 0x24, 0x7b, 0x80, 0xd0, 0x25, 0xc7, 0x29, 0xc6, 0x24, 0xcb, 0xc9,
	0xee, 0x7d, 0x74, 0x69, 0x3a, 0xab, 0x16, 0x61, 0x97, 0xe7, 0x3b, 0xff, 0xf9, 0xcf, 0xff, 0xc3,
	0x9d, 0x7f, 0xdf, 0x34, 0x9b, 0xe0, 0x55, 0x43, 0xea, 0x15, 0xf5, 0xce, 0x60, 0x68, 0x7c, 0x70,
	0xd1, 0xd1, 0x0f, 0xa8, 0x13, 0xe0, 0x97, 0x03, 0x90, 0xbd, 0xa2, 0xfc, 0x64, 0x70, 0xf5, 0x68,
	0x8c, 0x53, 0x6d, 0xc4, 0x27, 0xa7, 0x91, 0x04, 0x6e, 0x77, 0x48, 0x91, 0xcf, 0xe1, 0xf4, 0xa3,
	0xb5, 0x6f, 0x2f, 0x48, 0x31, 0x67, 0x05, 0xab, 0x26, 0x62, 0x98, 0xf9, 0x0d, 0x4c, 0xad, 0xd3,
	0x28, 0x09, 0x0d, 0xaa, 0xe8, 0x42, 0x7e, 0x9c, 0x04, 0xe7, 0x1d, 0x5c, 0xed, 0x19, 0x5f, 0xc0,
	0x45, 0x37, 0x93, 0x0c, 0xbd, 0x23, 0xea, 0x3c, 0x2b, 0x58, 0x95, 0x89, 0x99, 0xfd, 0xf5, 0x07,
	0x75, 0xf9, 0x00, 0xd7, 0xa3, 0x04, 0xe4, 0x9d, 0x25, 0xec, 0x1c, 0xda, 0xfd, 0x42, 0xcb, 0x74,
	0x94, 0xb3, 0x22, 0xab, 0x26, 0x62, 0x36, 0xe0, 0x74, 0xb0, 0xdc, 0xc2, 0xd9, 0xf3, 0x72, 0xf5,
	0x5d, 0x8d, 0xaf, 0x61, 0xfa, 0xc7, 0x90, 0xdf, 0xd6, 0xe3, 0xde, 0xf5, 0x7f, 0x9d, 0xe7, 0x8b,
	0x83, 0xba, 0x3e, 0x59, 0x79, 0xb4, 0x3e, 0x49, 0xfb, 0xfb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe4, 0xf9, 0x46, 0xee, 0x7d, 0x01, 0x00, 0x00,
}
